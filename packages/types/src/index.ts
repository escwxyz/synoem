/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductFeatures".
 */
export type ProductFeatures =
  | {
      title: string;
      description: string;
      iconName?: string | null;
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductVariants".
 */
export type ProductVariants = {
  sku: string;
  gallery?: (string | Image)[] | null;
  options?:
    | {
        label: string;
        value: string;
        type: 'text' | 'color';
        id?: string | null;
      }[]
    | null;
  id?: string | null;
}[];
/**
 * Click the button to generate the power points
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SolarPanelPowerPoints".
 */
export type SolarPanelPowerPoints =
  | {
      pmax?: number | null;
      efficiency?: number | null;
      vmp: number;
      imp: number;
      voc: number;
      isc: number;
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MenuItems".
 */
export type MenuItems =
  | {
      text: string;
      type: 'mega' | 'link';
      link?: LinkType;
      megaItems?: MegaMenuItems;
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MegaMenuItems".
 */
export type MegaMenuItems =
  | {
      type?: ('links' | 'banner') | null;
      linksSection?: {
        title?: string | null;
        items?: LinkItems;
        isExtended?: boolean | null;
      };
      banner?: {
        title: string;
        description?: string | null;
        media?:
          | ({
              relationTo: 'images';
              value: string | Image;
            } | null)
          | ({
              relationTo: 'videos';
              value: string | Video;
            } | null);
        link?: LinkType;
      };
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkItems".
 */
export type LinkItems =
  | {
      icon?: string | null;
      title: string;
      description?: string | null;
      link?: LinkType;
      id?: string | null;
    }[]
  | null;
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    faqs: Faq;
    pages: Page;
    industries: Industry;
    notifications: Notification;
    inquiries: Inquiry;
    'newsletter-subscribers': NewsletterSubscriber;
    images: Image;
    videos: Video;
    models: Model;
    documents: Document;
    attachments: Attachment;
    warranties: Warranty;
    instructions: Instruction;
    certifications: Certification;
    'packaging-configs': PackagingConfig;
    datasheets: Datasheet;
    drawings: Drawing;
    testimonials: Testimonial;
    posts: Post;
    'solar-panels': SolarPanel;
    'pump-controllers': PumpController;
    'solar-panel-categories': SolarPanelCategory;
    'pump-controller-categories': PumpControllerCategory;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    'solar-panels': {
      relatedInquires: 'inquiries';
    };
    'pump-controllers': {
      relatedInquires: 'inquiries';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    faqs: FaqsSelect<false> | FaqsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    industries: IndustriesSelect<false> | IndustriesSelect<true>;
    notifications: NotificationsSelect<false> | NotificationsSelect<true>;
    inquiries: InquiriesSelect<false> | InquiriesSelect<true>;
    'newsletter-subscribers': NewsletterSubscribersSelect<false> | NewsletterSubscribersSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    videos: VideosSelect<false> | VideosSelect<true>;
    models: ModelsSelect<false> | ModelsSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    attachments: AttachmentsSelect<false> | AttachmentsSelect<true>;
    warranties: WarrantiesSelect<false> | WarrantiesSelect<true>;
    instructions: InstructionsSelect<false> | InstructionsSelect<true>;
    certifications: CertificationsSelect<false> | CertificationsSelect<true>;
    'packaging-configs': PackagingConfigsSelect<false> | PackagingConfigsSelect<true>;
    datasheets: DatasheetsSelect<false> | DatasheetsSelect<true>;
    drawings: DrawingsSelect<false> | DrawingsSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    'solar-panels': SolarPanelsSelect<false> | SolarPanelsSelect<true>;
    'pump-controllers': PumpControllersSelect<false> | PumpControllersSelect<true>;
    'solar-panel-categories': SolarPanelCategoriesSelect<false> | SolarPanelCategoriesSelect<true>;
    'pump-controller-categories': PumpControllerCategoriesSelect<false> | PumpControllerCategoriesSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    footer: Footer;
    'company-info': CompanyInfo;
    'contact-info': ContactInfo;
    'social-links': SocialLink;
    header: Header;
  };
  globalsSelect: {
    footer: FooterSelect<false> | FooterSelect<true>;
    'company-info': CompanyInfoSelect<false> | CompanyInfoSelect<true>;
    'contact-info': ContactInfoSelect<false> | ContactInfoSelect<true>;
    'social-links': SocialLinksSelect<false> | SocialLinksSelect<true>;
    header: HeaderSelect<false> | HeaderSelect<true>;
  };
  locale: 'en' | 'de';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      'send-newsletter-confirmation-email': TaskSendNewsletterConfirmationEmail;
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  roles: ('admin' | 'editor' | 'customer')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faqs".
 */
export interface Faq {
  id: string;
  type: 'general' | 'solar-panel' | 'pump-controller';
  question: string;
  answer: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  layout: (
    | HeroBlockType
    | ContentBlockType
    | CallToActionBlockType
    | MediaBlockType
    | FeatureBlockType
    | TimelineBlockType
    | FAQBlockType
  )[];
  publishedAt?: string | null;
  /**
   * Whether to prerender the page
   */
  prerender?: boolean | null;
  slug: string;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlockType".
 */
export interface HeroBlockType {
  /**
   * A short, optional heading above the main title.
   */
  eyebrow?: string | null;
  /**
   * Main heading for the block.
   */
  title: string;
  /**
   * Secondary heading under the main title.
   */
  subtitle?: string | null;
  /**
   * Longer body text or paragraph content.
   */
  desc?: string | null;
  ctaPrimary?: LinkType;
  ctaSecondary?: LinkType;
  /**
   * Select an image or video to display in the hero section.
   */
  media:
    | {
        relationTo: 'images';
        value: string | Image;
      }
    | {
        relationTo: 'videos';
        value: string | Video;
      };
  /**
   * Select if text is on the left or the right.
   */
  textPlacement?: ('left' | 'right') | null;
  /**
   * Align text within its column (left, center, or right).
   */
  textAlignment?: ('start' | 'center' | 'end') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkType".
 */
export interface LinkType {
  type?: ('internal' | 'external' | 'relative') | null;
  internal?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'industries';
        value: string | Industry;
      } | null)
    | ({
        relationTo: 'solar-panels';
        value: string | SolarPanel;
      } | null)
    | ({
        relationTo: 'pump-controllers';
        value: string | PumpController;
      } | null)
    | ({
        relationTo: 'solar-panel-categories';
        value: string | SolarPanelCategory;
      } | null)
    | ({
        relationTo: 'pump-controller-categories';
        value: string | PumpControllerCategory;
      } | null);
  relative?: string | null;
  external?: string | null;
  label?: string | null;
  /**
   * Choose how the link should be rendered.
   */
  appearance?: ('default' | 'outline') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "industries".
 */
export interface Industry {
  id: string;
  title: string;
  description?: string | null;
  /**
   * The cover image for the industry
   */
  coverImage?: (string | null) | Image;
  slug: string;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  alt: string;
  blurDataUrl?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solar-panels".
 */
export interface SolarPanel {
  id: string;
  title: string;
  slug: string;
  slugLock?: boolean | null;
  visible?: boolean | null;
  industry: string | Industry;
  productCategory: string | SolarPanelCategory;
  excerpt: string;
  /**
   * Will be used as the hero image on the product page
   */
  heroImage?: (string | null) | Image;
  /**
   * Auto generated from gallery images, if no gallery images are present, the first image in the variants will be used as cover image
   */
  coverImage: string | Image;
  /**
   * Related inquiries
   */
  relatedInquires?: {
    docs?: (string | Inquiry)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  three?: {
    enabled?: boolean | null;
    /**
     * Upload a 3D model file
     */
    model?: (string | null) | Model;
  };
  modelName?: string | null;
  /**
   * Comprehensive description of the product
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  features?: ProductFeatures;
  /**
   * Upload images for the product
   */
  gallery?: (string | Image)[] | null;
  dimensions?: {
    h?: number | null;
    w?: number | null;
    d?: number | null;
    unit?: ('mm' | 'cm' | 'm') | null;
  };
  weight?: {
    value?: number | null;
    unit?: ('g' | 'kg') | null;
  };
  cellDesc: string;
  cellLength: number;
  cellWidth: number;
  cellCount: number;
  glassType: 'monofacial' | 'bifacial';
  bifaciality?: number | null;
  glassDesc: string;
  frameDesc: string;
  junctionDesc: string;
  connDesc: string;
  connLength: number;
  /**
   * Enter the workingtemperature range of the panel / cell
   */
  temp: {
    min: number;
    max: number;
  };
  snow: number;
  wind: number;
  hail: number;
  tolerance?: {
    min?: number | null;
    max?: number | null;
  };
  power: {
    min: number;
    max: number;
    /**
     * Step must be a multiple of 5
     */
    step: number;
    points?: SolarPanelPowerPoints;
  };
  tempCo: {
    pmax: number;
    isc: number;
    voc: number;
    noct: number;
  };
  ratings: {
    fuse: number;
    voltage: string;
    fire: string;
  };
  variants: ProductVariants;
  drawing?: (string | null) | Drawing;
  /**
   * Select the warranty for the product
   */
  warranty?: (string | null) | Warranty;
  datasheet?: (string | null) | Datasheet;
  certifications?: (string | Certification)[] | null;
  instructions?: (string | Instruction)[] | null;
  /**
   * OEM description
   */
  oem?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  moq?: {
    value?: number | null;
    unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
  };
  /**
   * Specify lead times for different quantity ranges
   */
  leadTime?:
    | {
        /**
         * Lower bound of the range. Leave empty for no lower limit.
         */
        min?: {
          value?: number | null;
          unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
        };
        /**
         * Upper bound of the range. Leave empty for no upper limit.
         */
        max?: {
          value?: number | null;
          unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
        };
        duration?: {
          value?: number | null;
          unit?: ('days' | 'weeks' | 'months' | 'years') | null;
        };
        id?: string | null;
      }[]
    | null;
  packagingConfig?: (string | null) | PackagingConfig;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solar-panel-categories".
 */
export interface SolarPanelCategory {
  id: string;
  title?: ('topcon' | 'perc' | 'hjt') | null;
  slug: string;
  slugLock?: boolean | null;
  description?: string | null;
  /**
   * The hero image will be displayed on the product category page
   */
  heroImage?: (string | null) | Image;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inquiries".
 */
export interface Inquiry {
  id: string;
  formType: 'simple' | 'product' | 'full';
  /**
   * Product inquiry related product
   */
  relatedProduct?:
    | ({
        relationTo: 'solar-panels';
        value: string | SolarPanel;
      } | null)
    | ({
        relationTo: 'pump-controllers';
        value: string | PumpController;
      } | null);
  /**
   * Inquiry status
   */
  status?: ('new' | 'replied' | 'following' | 'converted' | 'closed') | null;
  /**
   * Only for internal use, not displayed to customers
   */
  internalNotes?: string | null;
  /**
   * Date and time of the scheduled action
   */
  scheduledDate?: string | null;
  name: string;
  email: string;
  phone: string;
  requirements: string;
  company?: string | null;
  position?: string | null;
  type?: ('wholesaler' | 'retailer' | 'manufacturer' | 'project-developer' | 'other') | null;
  country?:
    | (
        | 'AF'
        | 'AX'
        | 'AL'
        | 'DZ'
        | 'AS'
        | 'AD'
        | 'AO'
        | 'AI'
        | 'AQ'
        | 'AG'
        | 'AR'
        | 'AM'
        | 'AW'
        | 'AU'
        | 'AT'
        | 'AZ'
        | 'BS'
        | 'BH'
        | 'BD'
        | 'BB'
        | 'BY'
        | 'BE'
        | 'BZ'
        | 'BJ'
        | 'BM'
        | 'BT'
        | 'BO'
        | 'BA'
        | 'BW'
        | 'BV'
        | 'BR'
        | 'IO'
        | 'BN'
        | 'BG'
        | 'BF'
        | 'BI'
        | 'KH'
        | 'CM'
        | 'CA'
        | 'CV'
        | 'KY'
        | 'CF'
        | 'TD'
        | 'CL'
        | 'CN'
        | 'CX'
        | 'CC'
        | 'CO'
        | 'KM'
        | 'CG'
        | 'CD'
        | 'CK'
        | 'CR'
        | 'CI'
        | 'HR'
        | 'CU'
        | 'CY'
        | 'CZ'
        | 'DK'
        | 'DJ'
        | 'DM'
        | 'DO'
        | 'EC'
        | 'EG'
        | 'SV'
        | 'GQ'
        | 'ER'
        | 'EE'
        | 'ET'
        | 'FK'
        | 'FO'
        | 'FJ'
        | 'FI'
        | 'FR'
        | 'GF'
        | 'PF'
        | 'TF'
        | 'GA'
        | 'GM'
        | 'GE'
        | 'DE'
        | 'GH'
        | 'GI'
        | 'GR'
        | 'GL'
        | 'GD'
        | 'GP'
        | 'GU'
        | 'GT'
        | 'GG'
        | 'GN'
        | 'GW'
        | 'GY'
        | 'HT'
        | 'HM'
        | 'VA'
        | 'HN'
        | 'HK'
        | 'HU'
        | 'IS'
        | 'IN'
        | 'ID'
        | 'IR'
        | 'IQ'
        | 'IE'
        | 'IM'
        | 'IL'
        | 'IT'
        | 'JM'
        | 'JP'
        | 'JE'
        | 'JO'
        | 'KZ'
        | 'KE'
        | 'KI'
        | 'KP'
        | 'KR'
        | 'XK'
        | 'KW'
        | 'KG'
        | 'LA'
        | 'LV'
        | 'LB'
        | 'LS'
        | 'LR'
        | 'LY'
        | 'LI'
        | 'LT'
        | 'LU'
        | 'MO'
        | 'MK'
        | 'MG'
        | 'MW'
        | 'MY'
        | 'MV'
        | 'ML'
        | 'MT'
        | 'MH'
        | 'MQ'
        | 'MR'
        | 'MU'
        | 'YT'
        | 'MX'
        | 'FM'
        | 'MD'
        | 'MC'
        | 'MN'
        | 'ME'
        | 'MS'
        | 'MA'
        | 'MZ'
        | 'MM'
        | 'NA'
        | 'NR'
        | 'NP'
        | 'NL'
        | 'AN'
        | 'NC'
        | 'NZ'
        | 'NI'
        | 'NE'
        | 'NG'
        | 'NU'
        | 'NF'
        | 'MP'
        | 'NO'
        | 'OM'
        | 'PK'
        | 'PW'
        | 'PS'
        | 'PA'
        | 'PG'
        | 'PY'
        | 'PE'
        | 'PH'
        | 'PN'
        | 'PL'
        | 'PT'
        | 'PR'
        | 'QA'
        | 'RE'
        | 'RO'
        | 'RU'
        | 'RW'
        | 'SH'
        | 'KN'
        | 'LC'
        | 'PM'
        | 'VC'
        | 'WS'
        | 'SM'
        | 'ST'
        | 'SA'
        | 'SN'
        | 'RS'
        | 'SC'
        | 'SL'
        | 'SG'
        | 'SK'
        | 'SI'
        | 'SB'
        | 'SO'
        | 'ZA'
        | 'GS'
        | 'ES'
        | 'LK'
        | 'SD'
        | 'SR'
        | 'SJ'
        | 'SZ'
        | 'SE'
        | 'CH'
        | 'SY'
        | 'TW'
        | 'TJ'
        | 'TZ'
        | 'TH'
        | 'TL'
        | 'TG'
        | 'TK'
        | 'TO'
        | 'TT'
        | 'TN'
        | 'TR'
        | 'TM'
        | 'TC'
        | 'TV'
        | 'UG'
        | 'UA'
        | 'AE'
        | 'GB'
        | 'US'
        | 'UM'
        | 'UY'
        | 'UZ'
        | 'VU'
        | 'VE'
        | 'VN'
        | 'VG'
        | 'VI'
        | 'WF'
        | 'EH'
        | 'YE'
        | 'ZM'
        | 'ZW'
      )
    | null;
  website?: string | null;
  employees?: ('1-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+') | null;
  productType?: ('solar-panel' | 'pump-controller') | null;
  productName?: string | null;
  sku?: string | null;
  qty?: {
    value?: number | null;
    unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
  };
  frequency?: ('one-time' | 'monthly' | 'quarterly' | 'yearly') | null;
  destination?:
    | (
        | 'AF'
        | 'AX'
        | 'AL'
        | 'DZ'
        | 'AS'
        | 'AD'
        | 'AO'
        | 'AI'
        | 'AQ'
        | 'AG'
        | 'AR'
        | 'AM'
        | 'AW'
        | 'AU'
        | 'AT'
        | 'AZ'
        | 'BS'
        | 'BH'
        | 'BD'
        | 'BB'
        | 'BY'
        | 'BE'
        | 'BZ'
        | 'BJ'
        | 'BM'
        | 'BT'
        | 'BO'
        | 'BA'
        | 'BW'
        | 'BV'
        | 'BR'
        | 'IO'
        | 'BN'
        | 'BG'
        | 'BF'
        | 'BI'
        | 'KH'
        | 'CM'
        | 'CA'
        | 'CV'
        | 'KY'
        | 'CF'
        | 'TD'
        | 'CL'
        | 'CN'
        | 'CX'
        | 'CC'
        | 'CO'
        | 'KM'
        | 'CG'
        | 'CD'
        | 'CK'
        | 'CR'
        | 'CI'
        | 'HR'
        | 'CU'
        | 'CY'
        | 'CZ'
        | 'DK'
        | 'DJ'
        | 'DM'
        | 'DO'
        | 'EC'
        | 'EG'
        | 'SV'
        | 'GQ'
        | 'ER'
        | 'EE'
        | 'ET'
        | 'FK'
        | 'FO'
        | 'FJ'
        | 'FI'
        | 'FR'
        | 'GF'
        | 'PF'
        | 'TF'
        | 'GA'
        | 'GM'
        | 'GE'
        | 'DE'
        | 'GH'
        | 'GI'
        | 'GR'
        | 'GL'
        | 'GD'
        | 'GP'
        | 'GU'
        | 'GT'
        | 'GG'
        | 'GN'
        | 'GW'
        | 'GY'
        | 'HT'
        | 'HM'
        | 'VA'
        | 'HN'
        | 'HK'
        | 'HU'
        | 'IS'
        | 'IN'
        | 'ID'
        | 'IR'
        | 'IQ'
        | 'IE'
        | 'IM'
        | 'IL'
        | 'IT'
        | 'JM'
        | 'JP'
        | 'JE'
        | 'JO'
        | 'KZ'
        | 'KE'
        | 'KI'
        | 'KP'
        | 'KR'
        | 'XK'
        | 'KW'
        | 'KG'
        | 'LA'
        | 'LV'
        | 'LB'
        | 'LS'
        | 'LR'
        | 'LY'
        | 'LI'
        | 'LT'
        | 'LU'
        | 'MO'
        | 'MK'
        | 'MG'
        | 'MW'
        | 'MY'
        | 'MV'
        | 'ML'
        | 'MT'
        | 'MH'
        | 'MQ'
        | 'MR'
        | 'MU'
        | 'YT'
        | 'MX'
        | 'FM'
        | 'MD'
        | 'MC'
        | 'MN'
        | 'ME'
        | 'MS'
        | 'MA'
        | 'MZ'
        | 'MM'
        | 'NA'
        | 'NR'
        | 'NP'
        | 'NL'
        | 'AN'
        | 'NC'
        | 'NZ'
        | 'NI'
        | 'NE'
        | 'NG'
        | 'NU'
        | 'NF'
        | 'MP'
        | 'NO'
        | 'OM'
        | 'PK'
        | 'PW'
        | 'PS'
        | 'PA'
        | 'PG'
        | 'PY'
        | 'PE'
        | 'PH'
        | 'PN'
        | 'PL'
        | 'PT'
        | 'PR'
        | 'QA'
        | 'RE'
        | 'RO'
        | 'RU'
        | 'RW'
        | 'SH'
        | 'KN'
        | 'LC'
        | 'PM'
        | 'VC'
        | 'WS'
        | 'SM'
        | 'ST'
        | 'SA'
        | 'SN'
        | 'RS'
        | 'SC'
        | 'SL'
        | 'SG'
        | 'SK'
        | 'SI'
        | 'SB'
        | 'SO'
        | 'ZA'
        | 'GS'
        | 'ES'
        | 'LK'
        | 'SD'
        | 'SR'
        | 'SJ'
        | 'SZ'
        | 'SE'
        | 'CH'
        | 'SY'
        | 'TW'
        | 'TJ'
        | 'TZ'
        | 'TH'
        | 'TL'
        | 'TG'
        | 'TK'
        | 'TO'
        | 'TT'
        | 'TN'
        | 'TR'
        | 'TM'
        | 'TC'
        | 'TV'
        | 'UG'
        | 'UA'
        | 'AE'
        | 'GB'
        | 'US'
        | 'UM'
        | 'UY'
        | 'UZ'
        | 'VU'
        | 'VE'
        | 'VN'
        | 'VG'
        | 'VI'
        | 'WF'
        | 'EH'
        | 'YE'
        | 'ZM'
        | 'ZW'
      )
    | null;
  timeline?: ('immediate' | '1-month' | '3-months' | '6-months') | null;
  contactEmail?: boolean | null;
  contactPhone?: boolean | null;
  contactWhatsapp?: boolean | null;
  /**
   * Maximum 3 files
   */
  attachments?:
    | {
        file?: (string | null) | Attachment;
        id?: string | null;
      }[]
    | null;
  source?: ('website' | 'exhibition' | 'referral' | 'social-media' | 'email' | 'phone' | 'other') | null;
  page?: string | null;
  ipAddress?: string | null;
  userAgent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pump-controllers".
 */
export interface PumpController {
  id: string;
  title: string;
  slug: string;
  slugLock?: boolean | null;
  visible?: boolean | null;
  industry: string | Industry;
  productCategory: string | PumpControllerCategory;
  excerpt: string;
  /**
   * Will be used as the hero image on the product page
   */
  heroImage?: (string | null) | Image;
  /**
   * Auto generated from gallery images, if no gallery images are present, the first image in the variants will be used as cover image
   */
  coverImage: string | Image;
  /**
   * Related inquiries
   */
  relatedInquires?: {
    docs?: (string | Inquiry)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  three?: {
    enabled?: boolean | null;
    /**
     * Upload a 3D model file
     */
    model?: (string | null) | Model;
  };
  category: 'smart' | 'standard';
  modelName?: string | null;
  /**
   * Comprehensive description of the product
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  features?: ProductFeatures;
  /**
   * Upload images for the product
   */
  gallery?: (string | Image)[] | null;
  wideAmplitudeVoltage: {
    min: number;
    max: number;
  };
  maxCurrent: number;
  maxPower: number;
  startingPressureRange: {
    min: number;
    max: number;
  };
  maxPressure: number;
  tempRange: {
    min: number;
    max: number;
  };
  frequencyRange: {
    min: number;
    max: number;
  };
  protectionGrade: string;
  threadInterface?: string | null;
  maxWorkingPressure: number;
  variants: ProductVariants;
  drawing?: (string | null) | Drawing;
  /**
   * Select the warranty for the product
   */
  warranty?: (string | null) | Warranty;
  datasheet?: (string | null) | Datasheet;
  certifications?: (string | Certification)[] | null;
  instructions?: (string | Instruction)[] | null;
  /**
   * OEM description
   */
  oem?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  moq?: {
    value?: number | null;
    unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
  };
  /**
   * Specify lead times for different quantity ranges
   */
  leadTime?:
    | {
        /**
         * Lower bound of the range. Leave empty for no lower limit.
         */
        min?: {
          value?: number | null;
          unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
        };
        /**
         * Upper bound of the range. Leave empty for no upper limit.
         */
        max?: {
          value?: number | null;
          unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
        };
        duration?: {
          value?: number | null;
          unit?: ('days' | 'weeks' | 'months' | 'years') | null;
        };
        id?: string | null;
      }[]
    | null;
  packagingConfig?: (string | null) | PackagingConfig;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pump-controller-categories".
 */
export interface PumpControllerCategory {
  id: string;
  title?: ('smart' | 'standard') | null;
  slug: string;
  slugLock?: boolean | null;
  description?: string | null;
  /**
   * The hero image will be displayed on the product category page
   */
  heroImage?: (string | null) | Image;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "models".
 */
export interface Model {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "drawings".
 */
export interface Drawing {
  id: string;
  title: string;
  description?: string | null;
  file: string | Image;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "warranties".
 */
export interface Warranty {
  id: string;
  title: string;
  productWarranty?: boolean | null;
  descProduct?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  durationProduct?: {
    value?: number | null;
    unit?: ('days' | 'weeks' | 'months' | 'years') | null;
  };
  powerWarranty?: boolean | null;
  descPower?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  durationPower?: {
    value?: number | null;
    unit?: ('days' | 'weeks' | 'months' | 'years') | null;
  };
  powerDegradation?: {
    initialGuarantee: number;
    annual: number;
    endYearGuarantee: number;
    compareWithIndustry?: boolean | null;
    industryStd?: {
      initialValue?: number | null;
      annualDegradation?: number | null;
      endYearValue?: number | null;
    };
  };
  /**
   * File of the warranty
   */
  file?: (string | null) | Document;
  fileDesc?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasheets".
 */
export interface Datasheet {
  id: string;
  title: string;
  desc?: string | null;
  /**
   * Upload a PDF file for the datasheet
   */
  file?: (string | null) | Document;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certifications".
 */
export interface Certification {
  id: string;
  name: string;
  desc?: string | null;
  /**
   * The logo of the certification
   */
  logo: string | Image;
  file?: (string | null) | Document;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instructions".
 */
export interface Instruction {
  id: string;
  title: string;
  description?: string | null;
  /**
   * Upload a PDF file for the instructions
   */
  file?: (string | null) | Document;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packaging-configs".
 */
export interface PackagingConfig {
  id: string;
  title: string;
  /**
   * Description of the packaging configuration
   */
  description?: string | null;
  /**
   * How the product is packaged individually (e.g., pieces, sets)
   */
  unitQty?: {
    value?: number | null;
    unit?: ('pcs' | 'sets' | 'plts' | 'ctns') | null;
  };
  /**
   * Dimensions of a single package
   */
  unitDimensions?: {
    h?: number | null;
    w?: number | null;
    d?: number | null;
    unit?: ('mm' | 'cm' | 'm') | null;
  };
  /**
   * Weight of a single packaged unit
   */
  unitWeight?: {
    value?: number | null;
    unit?: ('g' | 'kg') | null;
  };
  /**
   * Number of pieces that can fit on one pallet
   */
  qtyPerPallet?: number | null;
  /**
   * Dimensions of a fully loaded pallet
   */
  palletDimensions?: {
    h?: number | null;
    w?: number | null;
    d?: number | null;
    unit?: ('mm' | 'cm' | 'm') | null;
  };
  /**
   * Total weight of a fully loaded pallet (including pallet weight)
   */
  palletWeight?: {
    value?: number | null;
    unit?: ('g' | 'kg') | null;
  };
  /**
   * Standard shipping container type
   */
  containerType?: ('20GP' | '40GP' | '40HQ') | null;
  /**
   * Number of pallets that can fit in the container
   */
  pltsPerContainer?: number | null;
  /**
   * Total number of pieces in the container (Pallets × Units per Pallet)
   */
  totalQty?: number | null;
  /**
   * Total weight of all pallets in the container (kg)
   */
  totalWeight?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Customer uploaded files
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attachments".
 */
export interface Attachment {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: string;
  duration?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlockType".
 */
export interface ContentBlockType {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: LinkType;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'contentBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlockType".
 */
export interface CallToActionBlockType {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link?: LinkType;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'callToActionBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlockType".
 */
export interface MediaBlockType {
  /**
   * Select a media item to display
   */
  media:
    | {
        relationTo: 'images';
        value: string | Image;
      }
    | {
        relationTo: 'videos';
        value: string | Video;
      }
    | {
        relationTo: 'models';
        value: string | Model;
      };
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlockType".
 */
export interface FeatureBlockType {
  /**
   * A short, optional heading above the main title.
   */
  eyebrow?: string | null;
  title: string;
  /**
   * Secondary heading under the main title.
   */
  subtitle?: string | null;
  desc?: string | null;
  ctaPrimary?: LinkType;
  ctaSecondary?: LinkType;
  features: {
    image?: (string | null) | Image;
    title: string;
    desc?: string | null;
    id?: string | null;
  }[];
  /**
   * Select if text is on the top or the bottom.
   */
  textPlacement?: ('top' | 'bottom') | null;
  /**
   * Align text within its column (left, center, or right).
   */
  textAlignment?: ('start' | 'center' | 'end') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimelineBlockType".
 */
export interface TimelineBlockType {
  items?:
    | {
        title: string;
        icon?: string | null;
        date: string;
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'timelineBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlockType".
 */
export interface FAQBlockType {
  title?: string | null;
  description?: string | null;
  type: 'general' | 'solar-panel' | 'pump-controller';
  style: 'accordion' | 'card';
  content: (string | Faq)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'faqBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications".
 */
export interface Notification {
  id: string;
  title: string;
  link?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'solar-panels';
        value: string | SolarPanel;
      } | null)
    | ({
        relationTo: 'pump-controllers';
        value: string | PumpController;
      } | null);
  state?: ('active' | 'inactive') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Users who have subscribed to the newsletter
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-subscribers".
 */
export interface NewsletterSubscriber {
  id: string;
  /**
   * The subscriber's email address
   */
  email: string;
  /**
   * Subscription status
   */
  status?: ('subscribed' | 'unsubscribed') | null;
  /**
   * Token for unsubscribing
   */
  token?: string | null;
  metadata?: {
    /**
     * The page the subscriber subscribed from
     */
    page?: string | null;
    ipAddress?: string | null;
    userAgent?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: string;
  name: string;
  /**
   * The designation of the person giving the testimonial
   */
  designation?: string | null;
  quote: string;
  /**
   * The avatar of the person giving the testimonial
   */
  avatar?: (string | null) | Image;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  slug: string;
  slugLock?: boolean | null;
  authors?: (string | User)[] | null;
  publishedAt?: string | null;
  coverImage: string | Image;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'send-newsletter-confirmation-email' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'send-newsletter-confirmation-email' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'faqs';
        value: string | Faq;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'industries';
        value: string | Industry;
      } | null)
    | ({
        relationTo: 'notifications';
        value: string | Notification;
      } | null)
    | ({
        relationTo: 'inquiries';
        value: string | Inquiry;
      } | null)
    | ({
        relationTo: 'newsletter-subscribers';
        value: string | NewsletterSubscriber;
      } | null)
    | ({
        relationTo: 'images';
        value: string | Image;
      } | null)
    | ({
        relationTo: 'videos';
        value: string | Video;
      } | null)
    | ({
        relationTo: 'models';
        value: string | Model;
      } | null)
    | ({
        relationTo: 'documents';
        value: string | Document;
      } | null)
    | ({
        relationTo: 'attachments';
        value: string | Attachment;
      } | null)
    | ({
        relationTo: 'warranties';
        value: string | Warranty;
      } | null)
    | ({
        relationTo: 'instructions';
        value: string | Instruction;
      } | null)
    | ({
        relationTo: 'certifications';
        value: string | Certification;
      } | null)
    | ({
        relationTo: 'packaging-configs';
        value: string | PackagingConfig;
      } | null)
    | ({
        relationTo: 'datasheets';
        value: string | Datasheet;
      } | null)
    | ({
        relationTo: 'drawings';
        value: string | Drawing;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: string | Testimonial;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'solar-panels';
        value: string | SolarPanel;
      } | null)
    | ({
        relationTo: 'pump-controllers';
        value: string | PumpController;
      } | null)
    | ({
        relationTo: 'solar-panel-categories';
        value: string | SolarPanelCategory;
      } | null)
    | ({
        relationTo: 'pump-controller-categories';
        value: string | PumpControllerCategory;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faqs_select".
 */
export interface FaqsSelect<T extends boolean = true> {
  type?: T;
  question?: T;
  answer?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        heroBlock?: T | HeroBlockTypeSelect<T>;
        contentBlock?: T | ContentBlockTypeSelect<T>;
        callToActionBlock?: T | CallToActionBlockTypeSelect<T>;
        mediaBlock?: T | MediaBlockTypeSelect<T>;
        featureBlock?: T | FeatureBlockTypeSelect<T>;
        timelineBlock?: T | TimelineBlockTypeSelect<T>;
        faqBlock?: T | FAQBlockTypeSelect<T>;
      };
  publishedAt?: T;
  prerender?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlockType_select".
 */
export interface HeroBlockTypeSelect<T extends boolean = true> {
  eyebrow?: T;
  title?: T;
  subtitle?: T;
  desc?: T;
  ctaPrimary?: T | LinkTypeSelect<T>;
  ctaSecondary?: T | LinkTypeSelect<T>;
  media?: T;
  textPlacement?: T;
  textAlignment?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkType_select".
 */
export interface LinkTypeSelect<T extends boolean = true> {
  type?: T;
  internal?: T;
  relative?: T;
  external?: T;
  label?: T;
  appearance?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlockType_select".
 */
export interface ContentBlockTypeSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?: T | LinkTypeSelect<T>;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlockType_select".
 */
export interface CallToActionBlockTypeSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?: T | LinkTypeSelect<T>;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlockType_select".
 */
export interface MediaBlockTypeSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlockType_select".
 */
export interface FeatureBlockTypeSelect<T extends boolean = true> {
  eyebrow?: T;
  title?: T;
  subtitle?: T;
  desc?: T;
  ctaPrimary?: T | LinkTypeSelect<T>;
  ctaSecondary?: T | LinkTypeSelect<T>;
  features?:
    | T
    | {
        image?: T;
        title?: T;
        desc?: T;
        id?: T;
      };
  textPlacement?: T;
  textAlignment?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimelineBlockType_select".
 */
export interface TimelineBlockTypeSelect<T extends boolean = true> {
  items?:
    | T
    | {
        title?: T;
        icon?: T;
        date?: T;
        content?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlockType_select".
 */
export interface FAQBlockTypeSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  type?: T;
  style?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "industries_select".
 */
export interface IndustriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  coverImage?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications_select".
 */
export interface NotificationsSelect<T extends boolean = true> {
  title?: T;
  link?: T;
  state?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inquiries_select".
 */
export interface InquiriesSelect<T extends boolean = true> {
  formType?: T;
  relatedProduct?: T;
  status?: T;
  internalNotes?: T;
  scheduledDate?: T;
  name?: T;
  email?: T;
  phone?: T;
  requirements?: T;
  company?: T;
  position?: T;
  type?: T;
  country?: T;
  website?: T;
  employees?: T;
  productType?: T;
  productName?: T;
  sku?: T;
  qty?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  frequency?: T;
  destination?: T;
  timeline?: T;
  contactEmail?: T;
  contactPhone?: T;
  contactWhatsapp?: T;
  attachments?:
    | T
    | {
        file?: T;
        id?: T;
      };
  source?: T;
  page?: T;
  ipAddress?: T;
  userAgent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-subscribers_select".
 */
export interface NewsletterSubscribersSelect<T extends boolean = true> {
  email?: T;
  status?: T;
  token?: T;
  metadata?:
    | T
    | {
        page?: T;
        ipAddress?: T;
        userAgent?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  blurDataUrl?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos_select".
 */
export interface VideosSelect<T extends boolean = true> {
  duration?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "models_select".
 */
export interface ModelsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "attachments_select".
 */
export interface AttachmentsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "warranties_select".
 */
export interface WarrantiesSelect<T extends boolean = true> {
  title?: T;
  productWarranty?: T;
  descProduct?: T;
  durationProduct?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  powerWarranty?: T;
  descPower?: T;
  durationPower?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  powerDegradation?:
    | T
    | {
        initialGuarantee?: T;
        annual?: T;
        endYearGuarantee?: T;
        compareWithIndustry?: T;
        industryStd?:
          | T
          | {
              initialValue?: T;
              annualDegradation?: T;
              endYearValue?: T;
            };
      };
  file?: T;
  fileDesc?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instructions_select".
 */
export interface InstructionsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  file?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certifications_select".
 */
export interface CertificationsSelect<T extends boolean = true> {
  name?: T;
  desc?: T;
  logo?: T;
  file?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packaging-configs_select".
 */
export interface PackagingConfigsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  unitQty?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  unitDimensions?:
    | T
    | {
        h?: T;
        w?: T;
        d?: T;
        unit?: T;
      };
  unitWeight?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  qtyPerPallet?: T;
  palletDimensions?:
    | T
    | {
        h?: T;
        w?: T;
        d?: T;
        unit?: T;
      };
  palletWeight?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  containerType?: T;
  pltsPerContainer?: T;
  totalQty?: T;
  totalWeight?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasheets_select".
 */
export interface DatasheetsSelect<T extends boolean = true> {
  title?: T;
  desc?: T;
  file?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "drawings_select".
 */
export interface DrawingsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  file?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  name?: T;
  designation?: T;
  quote?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  authors?: T;
  publishedAt?: T;
  coverImage?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solar-panels_select".
 */
export interface SolarPanelsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  visible?: T;
  industry?: T;
  productCategory?: T;
  excerpt?: T;
  heroImage?: T;
  coverImage?: T;
  relatedInquires?: T;
  three?:
    | T
    | {
        enabled?: T;
        model?: T;
      };
  modelName?: T;
  description?: T;
  features?: T | ProductFeaturesSelect<T>;
  gallery?: T;
  dimensions?:
    | T
    | {
        h?: T;
        w?: T;
        d?: T;
        unit?: T;
      };
  weight?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  cellDesc?: T;
  cellLength?: T;
  cellWidth?: T;
  cellCount?: T;
  glassType?: T;
  bifaciality?: T;
  glassDesc?: T;
  frameDesc?: T;
  junctionDesc?: T;
  connDesc?: T;
  connLength?: T;
  temp?:
    | T
    | {
        min?: T;
        max?: T;
      };
  snow?: T;
  wind?: T;
  hail?: T;
  tolerance?:
    | T
    | {
        min?: T;
        max?: T;
      };
  power?:
    | T
    | {
        min?: T;
        max?: T;
        step?: T;
        points?: T | SolarPanelPowerPointsSelect<T>;
      };
  tempCo?:
    | T
    | {
        pmax?: T;
        isc?: T;
        voc?: T;
        noct?: T;
      };
  ratings?:
    | T
    | {
        fuse?: T;
        voltage?: T;
        fire?: T;
      };
  variants?: T | ProductVariantsSelect<T>;
  drawing?: T;
  warranty?: T;
  datasheet?: T;
  certifications?: T;
  instructions?: T;
  oem?: T;
  moq?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  leadTime?:
    | T
    | {
        min?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        max?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        duration?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        id?: T;
      };
  packagingConfig?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductFeatures_select".
 */
export interface ProductFeaturesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  iconName?: T;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SolarPanelPowerPoints_select".
 */
export interface SolarPanelPowerPointsSelect<T extends boolean = true> {
  pmax?: T;
  efficiency?: T;
  vmp?: T;
  imp?: T;
  voc?: T;
  isc?: T;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProductVariants_select".
 */
export interface ProductVariantsSelect<T extends boolean = true> {
  sku?: T;
  gallery?: T;
  options?:
    | T
    | {
        label?: T;
        value?: T;
        type?: T;
        id?: T;
      };
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pump-controllers_select".
 */
export interface PumpControllersSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  visible?: T;
  industry?: T;
  productCategory?: T;
  excerpt?: T;
  heroImage?: T;
  coverImage?: T;
  relatedInquires?: T;
  three?:
    | T
    | {
        enabled?: T;
        model?: T;
      };
  category?: T;
  modelName?: T;
  description?: T;
  features?: T | ProductFeaturesSelect<T>;
  gallery?: T;
  wideAmplitudeVoltage?:
    | T
    | {
        min?: T;
        max?: T;
      };
  maxCurrent?: T;
  maxPower?: T;
  startingPressureRange?:
    | T
    | {
        min?: T;
        max?: T;
      };
  maxPressure?: T;
  tempRange?:
    | T
    | {
        min?: T;
        max?: T;
      };
  frequencyRange?:
    | T
    | {
        min?: T;
        max?: T;
      };
  protectionGrade?: T;
  threadInterface?: T;
  maxWorkingPressure?: T;
  variants?: T | ProductVariantsSelect<T>;
  drawing?: T;
  warranty?: T;
  datasheet?: T;
  certifications?: T;
  instructions?: T;
  oem?: T;
  moq?:
    | T
    | {
        value?: T;
        unit?: T;
      };
  leadTime?:
    | T
    | {
        min?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        max?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        duration?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        id?: T;
      };
  packagingConfig?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solar-panel-categories_select".
 */
export interface SolarPanelCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  description?: T;
  heroImage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pump-controller-categories_select".
 */
export interface PumpControllerCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  description?: T;
  heroImage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Company Section for the footer
   */
  companySection?: {
    logo?: ('withSlogan' | 'withoutSlogan') | null;
    useCompanyDescription?: ('yes' | 'no') | null;
    companyDescription?: ('shortDescription' | 'longDescription') | null;
  };
  /**
   * Add multiple columns to organize footer content
   */
  columns?:
    | {
        size?: ('small' | 'medium' | 'large') | null;
        blockType?: ('linkGroup' | 'content' | 'contactInfo') | null;
        linkGroup?: {
          title: string;
          links?:
            | {
                link?: LinkType;
                id?: string | null;
              }[]
            | null;
        };
        content?: {
          title?: string | null;
          richText?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
        };
        id?: string | null;
      }[]
    | null;
  copyright?: string | null;
  links?:
    | {
        link?: LinkType;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company-info".
 */
export interface CompanyInfo {
  id: string;
  name: string;
  /**
   * The logo of the company
   */
  logo: string | Image;
  /**
   * The logo of the company in dark mode
   */
  logoDark?: (string | null) | Image;
  /**
   * The image used for the open graph image (preferably 1200x630)
   */
  openGraphImage?: (string | null) | Image;
  shortDescription: string;
  longDescription: string;
  vat?: string | null;
  registrationNumber?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-info".
 */
export interface ContactInfo {
  id: string;
  email: string;
  phone: string;
  /**
   * The first address will be used as the headquarters address.
   */
  addresses: {
    line1: string;
    line2?: string | null;
    city: string;
    state?: string | null;
    zip?: string | null;
    country: string;
    id?: string | null;
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-links".
 */
export interface SocialLink {
  id: string;
  links?:
    | {
        platform: 'facebook' | 'twitter' | 'linkedin' | 'instagram' | 'whatsapp' | 'tiktok' | 'youtube';
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  items?: MenuItems;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  companySection?:
    | T
    | {
        logo?: T;
        useCompanyDescription?: T;
        companyDescription?: T;
      };
  columns?:
    | T
    | {
        size?: T;
        blockType?: T;
        linkGroup?:
          | T
          | {
              title?: T;
              links?:
                | T
                | {
                    link?: T | LinkTypeSelect<T>;
                    id?: T;
                  };
            };
        content?:
          | T
          | {
              title?: T;
              richText?: T;
            };
        id?: T;
      };
  copyright?: T;
  links?:
    | T
    | {
        link?: T | LinkTypeSelect<T>;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company-info_select".
 */
export interface CompanyInfoSelect<T extends boolean = true> {
  name?: T;
  logo?: T;
  logoDark?: T;
  openGraphImage?: T;
  shortDescription?: T;
  longDescription?: T;
  vat?: T;
  registrationNumber?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-info_select".
 */
export interface ContactInfoSelect<T extends boolean = true> {
  email?: T;
  phone?: T;
  addresses?:
    | T
    | {
        line1?: T;
        line2?: T;
        city?: T;
        state?: T;
        zip?: T;
        country?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-links_select".
 */
export interface SocialLinksSelect<T extends boolean = true> {
  links?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  items?: T | MenuItemsSelect<T>;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MenuItems_select".
 */
export interface MenuItemsSelect<T extends boolean = true> {
  text?: T;
  type?: T;
  link?: T | LinkTypeSelect<T>;
  megaItems?: T | MegaMenuItemsSelect<T>;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MegaMenuItems_select".
 */
export interface MegaMenuItemsSelect<T extends boolean = true> {
  type?: T;
  linksSection?:
    | T
    | {
        title?: T;
        items?: T | LinkItemsSelect<T>;
        isExtended?: T;
      };
  banner?:
    | T
    | {
        title?: T;
        description?: T;
        media?: T;
        link?: T | LinkTypeSelect<T>;
      };
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkItems_select".
 */
export interface LinkItemsSelect<T extends boolean = true> {
  icon?: T;
  title?: T;
  description?: T;
  link?: T | LinkTypeSelect<T>;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSend-newsletter-confirmation-email".
 */
export interface TaskSendNewsletterConfirmationEmail {
  input: {
    email: string;
    createdAt: string;
    token: string;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'solar-panels';
          value: string | SolarPanel;
        } | null)
      | ({
          relationTo: 'pump-controllers';
          value: string | PumpController;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}