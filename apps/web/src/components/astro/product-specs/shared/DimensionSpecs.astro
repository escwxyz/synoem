---
import type { SolarPanel } from "@synoem/payload/payload-types";
import { getPayloadClient } from "@synoem/payload/client";
import { getDrawing } from "~/utils/get-drawing";
import { Card, CardContent, CardFooter } from "~/components/starwind/card";
import { Image } from "@unpic/astro";
import { getImage } from "~/utils/get-image";
import Table from "~/components/astro/table";

interface Props {
  dimensions: SolarPanel["dimensions"]; // TODO: extend to support other products
  drawing?: SolarPanel["drawing"];
}

const { dimensions: dimensionsData, drawing: drawingData }: Props = Astro.props;

const hasDimensions =
  dimensionsData && Object.values(dimensionsData).length === 4;

const payload = await getPayloadClient();

const drawing = await getDrawing({
  drawing: drawingData,
  payload,
});

const hasDrawing = drawing && drawing.file;

const drawingImage = hasDrawing
  ? await getImage({
      image: drawing?.file,
      payload,
    })
  : null;
---

<div class="space-y-4">
  {
    hasDimensions && (
      <div class="overflow-x-auto">
        <h3 class="text-lg font-medium mb-4">
          Dimensions ({dimensionsData.unit})
        </h3>
        <Table.Root>
          <Table.Header />
          <Table.Body>
            <Table.Row>
              <Table.Cell>Hight</Table.Cell>
              <Table.Cell>{dimensionsData.h}</Table.Cell>
            </Table.Row>
            <Table.Row>
              <Table.Cell>Width</Table.Cell>
              <Table.Cell>{dimensionsData.w}</Table.Cell>
            </Table.Row>
            <Table.Row>
              <Table.Cell>Depth</Table.Cell>
              <Table.Cell>{dimensionsData.d}</Table.Cell>
            </Table.Row>
          </Table.Body>
        </Table.Root>
      </div>
    )
  }
  {
    hasDrawing && drawingImage?.url && (
      <Card>
        <CardContent class="p-4">
          <div
            class="image-container relative cursor-pointer"
            data-full-image={drawingImage?.url}
          >
            <Image
              src={drawingImage?.url}
              alt="Structure Drawing"
              width={drawingImage?.width || 0}
              height={drawingImage?.height || 0}
              class="rounded-lg opacity-80 hover:opacity-100 transition-opacity"
            />
          </div>
        </CardContent>
        <CardFooter class="grid place-items-center w-full text-sm">
          {drawing.title}
        </CardFooter>
      </Card>
    )
  }
</div>
<div
  id="imageModal"
  class="fixed inset-0 z-50 place-items-center bg-black bg-opacity-80 hidden"
>
  <div class="relative max-w-[90vw] max-h-[90vh]">
    <img
      id="modalImage"
      src=""
      alt="Enlarged drawing"
      class="max-w-full max-h-[85vh] object-contain rounded-lg"
    />
    <button
      id="closeModal"
      class="absolute top-2 right-2 bg-black bg-opacity-50 text-white rounded-full w-8 h-8 flex items-center justify-center"
    >
      Ã—
    </button>
  </div>
</div>

<script>
  function initImageModal() {
    const imageContainers = document.querySelectorAll(".image-container");
    const modal = document.getElementById("imageModal");
    const modalImage = document.getElementById("modalImage");
    const closeButton = document.getElementById("closeModal");

    imageContainers.forEach((container) => {
      container.addEventListener("click", () => {
        const fullImageUrl = container.getAttribute("data-full-image");
        if (fullImageUrl && modal && modalImage) {
          // @ts-ignore
          modalImage.src = fullImageUrl;
          modal.classList.add("grid");
          modal.classList.remove("hidden");
          document.body.style.overflow = "hidden";
        }
      });
    });

    if (closeButton && modal) {
      closeButton.addEventListener("click", () => {
        modal.classList.add("hidden");
        document.body.style.overflow = "";
      });
    }

    if (modal) {
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.classList.add("hidden");
          document.body.style.overflow = "";
        }
      });
    }
  }

  document.addEventListener("DOMContentLoaded", initImageModal);

  function enablePinchZoom() {
    const modalImage = document.getElementById("modalImage");
    if (!modalImage) return;

    let currentScale = 1;
    let startDistance = 0;

    modalImage.addEventListener("touchstart", (e) => {
      if (e.touches.length === 2) {
        startDistance = getDistance(e.touches[0], e.touches[1]);
        e.preventDefault();
      }
    });

    modalImage.addEventListener("touchmove", (e) => {
      if (e.touches.length === 2) {
        const currentDistance = getDistance(e.touches[0], e.touches[1]);
        const scale = currentDistance / startDistance;

        const newScale = Math.min(Math.max(currentScale * scale, 1), 3);

        modalImage.style.transform = `scale(${newScale})`;
        e.preventDefault();
      }
    });

    modalImage.addEventListener("touchend", () => {
      if (modalImage.style.transform) {
        currentScale =
          parseFloat(
            modalImage.style.transform.replace("scale(", "").replace(")", ""),
          ) || 1;
      }
    });

    function getDistance(touch1: Touch, touch2: Touch) {
      const dx = touch1.clientX - touch2.clientX;
      const dy = touch1.clientY - touch2.clientY;
      return Math.sqrt(dx * dx + dy * dy);
    }
  }

  document.addEventListener("DOMContentLoaded", enablePinchZoom);
</script>
