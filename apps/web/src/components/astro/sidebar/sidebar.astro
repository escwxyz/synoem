---
import { cn } from "@synoem/ui/lib/utils";
import type { HTMLAttributes } from "astro/types";
import { sidebarOpenAtom } from "~/atoms/sidebar";
import { SidebarMobile } from "~/components/react";

interface Props extends HTMLAttributes<"div"> {
  side?: "left" | "right";
  variant?: "sidebar" | "floating" | "inset";
  collapsible?: "icon" | "offcanvas" | "none";
  className?: string;
  defaultOpen?: boolean;
}

const {
  side = "left",
  variant = "inset",
  collapsible = "offcanvas",
  className,
  defaultOpen,
  ...props
} = Astro.props;

const initialState = sidebarOpenAtom.get() ? "expanded" : "collapsed";
---

{
  collapsible === "none" ? (
    <div
      data-slot="sidebar"
      class={cn(
        "bg-sidebar text-sidebar-foreground flex h-full w-full flex-col",
        className,
      )}
      {...props}
    >
      <slot />
    </div>
  ) : (
    <Fragment>
      {
        // TODO: Test
      }
      <div class="block md:hidden">
        <SidebarMobile client:only="react">
          <slot />
        </SidebarMobile>
      </div>

      <div
        class="group peer text-sidebar-foreground hidden md:block"
        data-state={initialState}
        data-collapsible={initialState === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
        data-slot="sidebar"
        data-default-open={
          defaultOpen !== undefined ? defaultOpen.toString() : undefined
        }
        {...props}
      >
        <div
          data-slot="sidebar-gap"
          class={cn(
            "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
              : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)",
          )}
        />
        <div
          data-slot="sidebar-container"
          class={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",

            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
              : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className,
          )}
        >
          <div
            data-sidebar="sidebar"
            data-slot="sidebar-inner"
            class="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
          >
            <slot />
          </div>
        </div>
      </div>
    </Fragment>
  )
}

<script>
  import { sidebarOpenAtom } from "~/atoms/sidebar";

  const sidebar: HTMLDivElement | null = document.querySelector(
    '[data-slot="sidebar"]',
  );

  const defaultOpen = sidebar?.dataset.defaultOpen;
  const collapsible = sidebar?.getAttribute("data-collapsible") || "icon";

  const initializeSidebar = () => {
    // 检查 localStorage 是否有值
    if (
      localStorage.getItem("sidebar_open") === null &&
      defaultOpen !== undefined
    ) {
      sidebarOpenAtom.set(defaultOpen === "true");
    }

    // 应用当前状态到 DOM
    updateSidebarDom(sidebarOpenAtom.get());
  };

  const updateSidebarDom = (isOpen: boolean) => {
    const state = isOpen ? "expanded" : "collapsed";

    if (sidebar) {
      sidebar.dataset.state = state;
      sidebar.dataset.collapsible = state === "collapsed" ? collapsible : "";
    }

    // 触发自定义事件，通知其他组件
    document.dispatchEvent(
      new CustomEvent("sidebar-state-changed", {
        detail: { state, isOpen },
      }),
    );
  };

  // 初始化
  initializeSidebar();

  // 监听状态变化
  sidebarOpenAtom.listen(updateSidebarDom);

  // 确保在DOM完全加载后再次初始化
  document.addEventListener("DOMContentLoaded", initializeSidebar);
</script>
