---
import RootLayout from "~/layouts/RootLayout.astro";
import type { Product } from "@synoem/payload/payload-types";
import { getPayloadClient } from "@synoem/payload/client";
import { defaultLocale, type Locale, PRODUCTS_PER_PAGE } from "@synoem/config";
import {
  ProductGrid,
  ProductFiltersBar,
  ProductFilters,
} from "~/components/react";
import { filterMetadataStore } from "~/stores/product-filter";
import { Image } from "@unpic/astro";
import { ProductFiltersDesktop } from "~/components/react/product-filters/ProductFiltersDesktop";
import {
  buildProductFilterMetadata,
  buildQueryConditions,
} from "~/utils/build-product-query";

interface Props {
  title: string;
  description: string;
  imageUrl?: string;
  category: Product["category"];
  initialFilters?: Record<string, string | string[]>;
}

const { title, description, imageUrl, category } = Astro.props;

const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get("page") || "1");
const limit = PRODUCTS_PER_PAGE;
const sort = url.searchParams.get("sort") || "featured";

const effectiveLocale = (Astro.currentLocale ?? defaultLocale) as Locale;
const payload = await getPayloadClient();

let initialPageProducts: Product[] = [];
let totalProducts = 0;

const metadataResponse = await payload.find({
  collection: "products",
  limit: 1000,
  where: {
    _status: {
      equals: "published",
    },
  },
  locale: effectiveLocale,
  select: {
    category: true,
    solarPanel: true,
    pumpController: true,
  },
  depth: 1,
});

if (metadataResponse.docs.length === 0) {
  return Astro.redirect("/404");
}

const filterMetadata = buildProductFilterMetadata(metadataResponse.docs);

filterMetadataStore.set(filterMetadata[category]);

try {
  const andConditions = buildQueryConditions(category, url.searchParams);

  const productResponse = await payload.find({
    collection: "products",
    where: {
      _status: { equals: "published" },
      ...(andConditions.length > 0 ? { and: andConditions } : {}),
    },
    locale: effectiveLocale,
    limit,
    page,
    depth: 1,
    sort: sort === "newest" ? "-createdAt" : "order",
  });
  initialPageProducts = productResponse.docs as Product[];
  totalProducts = productResponse.totalDocs;
} catch (error) {
  console.error(`Failed to fetch ${category}:`, error);
  initialPageProducts = [];
  totalProducts = 0;
}

const cellTypes = url.searchParams.getAll("cellType");
const powerMin = url.searchParams.get("powerMin")
  ? Number(url.searchParams.get("powerMin"))
  : undefined;
const powerMax = url.searchParams.get("powerMax")
  ? Number(url.searchParams.get("powerMax"))
  : undefined;
const efficiencyMin = url.searchParams.get("efficiencyMin")
  ? Number(url.searchParams.get("efficiencyMin"))
  : undefined;
const efficiencyMax = url.searchParams.get("efficiencyMax")
  ? Number(url.searchParams.get("efficiencyMax"))
  : undefined;

const effectiveInitialFilters = {
  cellType: cellTypes,
  powerMin: powerMin?.toString(),
  powerMax: powerMax?.toString(),
  efficiencyMin: efficiencyMin?.toString(),
  efficiencyMax: efficiencyMax?.toString(),
  sort,
  page: page.toString(),
};
---

<RootLayout>
  <div
    class="relative w-full h-[300px] md:h-[400px] rounded-lg overflow-hidden mb-8"
  >
    {
      imageUrl ? (
        <Image
          src={imageUrl}
          alt="Hero image"
          class="object-cover"
          priority
          height={400}
          width={1200}
        />
      ) : (
        <div class="absolute inset-0 bg-muted flex flex-col justify-center px-6 md:px-12" />
      )
    }
    <div class="absolute inset-0 flex flex-col justify-center px-6 md:px-12">
      <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4">
        {title}
      </h1>
      <p class="text-white/90 text-lg md:text-xl max-w-xl">
        {description}
      </p>
    </div>
  </div>

  <div class="flex flex-col lg:flex-row gap-8">
    <ProductFiltersDesktop client:load locale={effectiveLocale}>
      <ProductFilters
        client:only="react"
        initialFilters={effectiveInitialFilters}
        filterMetadata={filterMetadata[category]}
        productCategory={category}
        locale={effectiveLocale}
      />
    </ProductFiltersDesktop>

    <div class="flex-1">
      <ProductFiltersBar
        client:load
        totalProducts={totalProducts}
        initialFilters={effectiveInitialFilters}
        locale={effectiveLocale}
      >
        <ProductFilters
          client:only="react"
          initialFilters={effectiveInitialFilters}
          filterMetadata={filterMetadata[category]}
          productCategory={category}
          locale={effectiveLocale}
        />
      </ProductFiltersBar>

      <ProductGrid
        client:only="react"
        initialProducts={initialPageProducts}
        totalProducts={totalProducts}
        category={category}
        initialFilters={effectiveInitialFilters}
        filterMetadata={filterMetadata[category]}
        locale={effectiveLocale}
      />
    </div>
  </div>
</RootLayout>

<script
  is:inline
  define:vars={{
    metadata: filterMetadata,
    initialProducts: initialPageProducts,
    totalProducts,
    category,
    initialPage: page,
    initialFilters: effectiveInitialFilters,
  }}
>
  window.initialProductData = {
    metadata,
    initialProducts,
    totalProducts,
    category,
    initialPage,
    initialFilters,
  };
</script>
