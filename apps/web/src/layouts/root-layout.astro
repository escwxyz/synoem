---
import "@synoem/ui/web.css";
import "~/styles/starwind.css";
import { getLocaleFromUrl } from "~/i18n/utils";
import { Footer, Head } from "~/layouts";
import { type Props as SEOProps } from "astro-seo";
import { SidebarWrapper, SidebarInset } from "~/components/astro";
import { CookieConsent } from "~/components/react";

const locale = getLocaleFromUrl(Astro.url);

type Props = SEOProps;

const props: Props = Astro.props;
---

<!doctype html>
<html lang={locale} class="overflow-x-hidden max-w-full min-h-screen">
  <Head {...props} />
  <body
    class="flex min-h-screen flex-col antialiased [--header-height:calc(theme(spacing.14))]"
  >
    <!-- <Header locale={locale} /> -->
    <SidebarWrapper class="flex flex-col">
      <slot name="sidebar" />
      <SidebarInset
        className="w-full max-w-none flex-1 mx-auto p-8 md:p-16 lg:px-16"
      >
        <slot />
      </SidebarInset>
    </SidebarWrapper>
    <CookieConsent client:only="react" />
    <Footer locale={locale} />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (document === window.document && typeof localStorage !== "undefined") {
      if (window._themeObserver) {
        window._themeObserver.disconnect();
      }

      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });

      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });

      window._themeObserver = observer;
    }
  }

  if (!window._themeObserver) {
    setDarkMode(document);
  }

  document.addEventListener("astro:before-swap", (ev) => {
    setDarkMode(ev.newDocument);
  });
</script>
<script>
  import { sidebarOpenAtom } from "~/atoms/sidebar";

  const updateLayoutBasedOnSidebarState = () => {
    const sidebar: HTMLDivElement | null = document.querySelector(
      '[data-slot="sidebar"]',
    );
    const mainContent: HTMLElement | null = document.querySelector(
      '[data-slot="sidebar-inset"]',
    );

    if (sidebar && mainContent) {
      const sidebarState =
        sidebar.dataset.state ||
        (sidebarOpenAtom.get() ? "expanded" : "collapsed");
      const sidebarVariant = sidebar.dataset.variant || "sidebar";

      mainContent.dataset.sidebarState = sidebarState;
      mainContent.dataset.sidebarVariant = sidebarVariant;

      sidebarOpenAtom.listen((isOpen) => {
        const newState = isOpen ? "expanded" : "collapsed";
        mainContent.dataset.sidebarState = newState;
      });

      const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "data-state"
          ) {
            mainContent.dataset.sidebarState = sidebar.dataset.state;
          }
        }
      });

      observer.observe(sidebar, { attributes: true });
    }
  };

  document.addEventListener(
    "DOMContentLoaded",
    updateLayoutBasedOnSidebarState,
  );

  if (
    document.readyState === "interactive" ||
    document.readyState === "complete"
  ) {
    updateLayoutBasedOnSidebarState();
  }
</script>
